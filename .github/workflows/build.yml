# a chaque push, la ci se lance
on:
  push:

jobs:
  # name pour ce job
  get-version:
    # récupération du code get-version sur le repo de shiipou sur la branche main
    uses: shiipou/github-actions/.github/workflows/get-version.yml@main
    with:
      # détecter mes branches de release (je peux en mettre plusieurs)
      release-branches: '^(main)$'

  # name pour un autre job
  test:
   name: Spring test
   runs-on: ubuntu-latest
   # si tests failed, continue quand même le build
   continue-on-error: true
   services:
     postgres:
       image: postgres
       env:
         POSTGRES_USER: postgres
         POSTGRES_DB: spring-security
         POSTGRES_PASSWORD: postgres
       # Set health checks to wait until postgres has started
       options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
   steps:
     - name: Setup java
       uses: actions/setup-java@v4
       with:
         distribution: 'temurin'
         java-version: 17
     - name: Setup gradle
       uses: gradle/actions/setup-gradle@v4
     - name: Checkout clone source code
       uses: actions/checkout@v4
     - name: Build with Gradle
       run: ./gradlew test
    
  # id (name) pour un autre job
  build:
   name: Spring build
   runs-on: ubuntu-latest
   # si get-version voit un commit qui permet une release (montée de version), il fait le build, sinon fait pas le build
   if: ${{ needs.get-version.outputs.will-release == 'true' }}
   # on doit lui dire qu'on a besoin de get-version pour le build
   needs: 
     - get-version
   steps:
     - name: Print version
       # pipe pour mettre plusieurs echo dans le run
       run: |
         echo "${{ needs.get-version.outputs.version }}"
         echo "${{ needs.get-version.outputs.changelogs }}"
         echo "${{ needs.get-version.outputs.is-prerelease }}"
         echo "${{ needs.get-version.outputs.will-release }}"
     - name: Setup java
       uses: actions/setup-java@v4
       with:
         distribution: 'temurin'
         java-version: 17
     - name: Setup gradle
       uses: gradle/actions/setup-gradle@v4
     - name: Checkout clone source code
       uses: actions/checkout@v4
     - name: Build with Gradle
       # variable d'environnement pour que gradle en ait connaissance
       env:
         VERSION: "${{ needs.get-version.outputs.version }}"
       run: ./gradlew bootjar
     # - run: ls -lia build/libs
     - uses: actions/upload-artifact@v4
       with:
         name: spring
         path: build/libs/

  release:
    name: Release
    runs-on: ubuntu-latest
    needs:
      - get-version
      - build
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: spring
          path: build/
      - name: Create Github Release
        env:
          VERSION: "${{ needs.get-version.outputs.version }}"
          REPO: "${{ github.repository }}"
          COMMIT: "${{ github.sha }}"
        # $REPO = le repo sur lequel on veut que ça se fasse
        # $COMMIT = le commit en rapport au push (prend donc le bon commit et non le dernier effectué)
        # $VERSION = la version récupérée du get-version
        run: |
          gh release create --repo $REPO --target $COMMIT $VERSION build/*





      
